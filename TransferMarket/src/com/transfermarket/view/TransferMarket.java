package com.transfermarket.view;

import com.transfermarket.model.TransferModel;
import com.transfermarket.util.ValidationUtil;
import java.util.LinkedList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author Samir Adhikari
 */
public class TransferMarket extends javax.swing.JFrame {

    private LinkedList<TransferModel> transferList;
    private java.awt.CardLayout cardLayout;

    /**
     * Creates new form TransferMarket
     */
    public TransferMarket() {
        setResizable(false);
        initComponents();
        transferList = new LinkedList<>();
        initializeLayout(); // Set up CardLayout and add screens
        startProgress();// Show loading screen and initiate progress
        
        // Add table mouse listener
        tblTransfer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblTransferMouseClicked(evt);} });
       }
    
    private void tblTransferMouseClicked(java.awt.event.MouseEvent evt) {
    int selectedRow = tblTransfer.getSelectedRow();
    if (selectedRow != -1) {
        TransferModel player = transferList.get(selectedRow);
        
        txtPlayerId.setText(String.valueOf(player.getPlayerId()));
        txtPlayerName.setText(player.getPlayerName());
        comboPosition.setSelectedItem(player.getPosition());
        comboNationality.setSelectedItem(player.getNationality());
        txtAge.setText(String.valueOf(player.getAge()));
        txtMarketValue.setText(String.valueOf(player.getMarketValue()));
        txtContractDuration.setText(String.valueOf(player.getContractDuration()));
        txtGoalContribution.setText(String.valueOf(player.getGoalContribution()));
        
        btnAdd.setEnabled(false);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScreen = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblMainBarSlogan = new javax.swing.JLabel();
        lblMainBarLogo = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        tabPaneMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        lblPnlHome = new javax.swing.JLabel();
        pnlTransferList = new javax.swing.JPanel();
        spTblTransfer = new javax.swing.JScrollPane();
        tblTransfer = new javax.swing.JTable();
        lblTblTransferTitle = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtPlayerId = new javax.swing.JTextField();
        txtPlayerName = new javax.swing.JTextField();
        comboPosition = new javax.swing.JComboBox<>();
        txtAge = new javax.swing.JTextField();
        comboNationality = new javax.swing.JComboBox<>();
        txtMarketValue = new javax.swing.JTextField();
        txtContractDuration = new javax.swing.JTextField();
        txtGoalContribution = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        lblErrorPlayerId = new javax.swing.JLabel();
        lblErrorPlayerName = new javax.swing.JLabel();
        lblErrorContractDuration = new javax.swing.JLabel();
        lblErrorPosition = new javax.swing.JLabel();
        lblErrorAge = new javax.swing.JLabel();
        lblErrorMarketValue = new javax.swing.JLabel();
        lblErrorNationality = new javax.swing.JLabel();
        lblErrorGA = new javax.swing.JLabel();
        pnlAboutUs = new javax.swing.JPanel();
        pnlLoginScreen = new javax.swing.JPanel();
        pnlLoginLeft = new javax.swing.JPanel();
        lblLoginLogo = new javax.swing.JLabel();
        pnlLoginRight = new javax.swing.JPanel();
        txtFldLoginUsername = new javax.swing.JTextField();
        pwdFldLogin = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        lblLoginTitle = new javax.swing.JLabel();
        lblLoginSubTitle = new javax.swing.JLabel();
        lblLoginForgotPwd = new javax.swing.JLabel();
        lblLoginError = new javax.swing.JLabel();
        pnlLoadingScreen = new javax.swing.JPanel();
        lblLoadingLogo = new javax.swing.JLabel();
        pgBarSplashScreen = new javax.swing.JProgressBar(0,100);

        pnlMainScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlMainScreen.setMaximumSize(new java.awt.Dimension(1100, 850));
        pnlMainScreen.setMinimumSize(new java.awt.Dimension(1100, 850));
        pnlMainScreen.setPreferredSize(new java.awt.Dimension(1100, 850));
        pnlMainScreen.setSize(new java.awt.Dimension(1100, 850));

        pnlMainBar.setBackground(new java.awt.Color(255, 255, 255));

        lblMainBarSlogan.setBackground(new java.awt.Color(255, 255, 255));
        lblMainBarSlogan.setFont(new java.awt.Font("Impact", 1, 44)); // NOI18N
        lblMainBarSlogan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMainBarSlogan.setText("Kickstart the Future of Football Deals !  ");

        lblMainBarLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Logo.png"))); // NOI18N

        btnLogout.setBackground(new java.awt.Color(204, 204, 204));
        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Logout.png"))); // NOI18N
        btnLogout.setBorder(null);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblMainBarLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMainBarSlogan, javax.swing.GroupLayout.PREFERRED_SIZE, 849, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMainBarSlogan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMainBarLayout.createSequentialGroup()
                        .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainBarLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMainBarLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        tabPaneMain.setBackground(new java.awt.Color(255, 255, 255));
        tabPaneMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        tabPaneMain.setForeground(new java.awt.Color(51, 0, 51));
        tabPaneMain.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        pnlHome.setBackground(new java.awt.Color(255, 255, 255));
        pnlHome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        lblPnlHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Dashboard.png"))); // NOI18N

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addComponent(lblPnlHome, javax.swing.GroupLayout.DEFAULT_SIZE, 1120, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(lblPnlHome, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 68, Short.MAX_VALUE))
        );

        tabPaneMain.addTab("Home", pnlHome);

        pnlTransferList.setBackground(new java.awt.Color(255, 255, 255));

        tblTransfer.setBackground(new java.awt.Color(255, 204, 204));
        tblTransfer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Player ID", " Player Name", " Position", " Nationality", " Age", " Market Value($)", " Contract Duration", " G/A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTransfer.setGridColor(new java.awt.Color(0, 0, 0));
        tblTransfer.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblTransfer.setSelectionForeground(new java.awt.Color(102, 255, 255));
        tblTransfer.setShowGrid(true);
        tblTransfer.getTableHeader().setReorderingAllowed(false);
        spTblTransfer.setViewportView(tblTransfer);
        if (tblTransfer.getColumnModel().getColumnCount() > 0) {
            tblTransfer.getColumnModel().getColumn(0).setResizable(false);
            tblTransfer.getColumnModel().getColumn(1).setResizable(false);
            tblTransfer.getColumnModel().getColumn(2).setResizable(false);
            tblTransfer.getColumnModel().getColumn(3).setResizable(false);
            tblTransfer.getColumnModel().getColumn(4).setResizable(false);
            tblTransfer.getColumnModel().getColumn(4).setPreferredWidth(40);
            tblTransfer.getColumnModel().getColumn(5).setResizable(false);
            tblTransfer.getColumnModel().getColumn(7).setResizable(false);
        }

        lblTblTransferTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTblTransferTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTblTransferTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTblTransferTitle.setText("Transfer List");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtPlayerId.setBorder(javax.swing.BorderFactory.createTitledBorder("Player ID"));
        txtPlayerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlayerIdActionPerformed(evt);
            }
        });

        txtPlayerName.setBorder(javax.swing.BorderFactory.createTitledBorder("Player Name"));

        comboPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Position", "GK", "LB", "RB", "CB", "CDM", "CM", "AMF", "RWF", "LWF", "ST" }));
        comboPosition.setBorder(javax.swing.BorderFactory.createTitledBorder("Position"));

        txtAge.setBorder(javax.swing.BorderFactory.createTitledBorder("Age"));
        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        comboNationality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Country", "Argentina", "Brazil", "Spain", "England", "France", "Nepal", "Belgium", "Slovakia", "Hungary" }));
        comboNationality.setBorder(javax.swing.BorderFactory.createTitledBorder("Nationality"));

        txtMarketValue.setBorder(javax.swing.BorderFactory.createTitledBorder("Market Value"));
        txtMarketValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMarketValueActionPerformed(evt);
            }
        });

        txtContractDuration.setBorder(javax.swing.BorderFactory.createTitledBorder("Contract Duration"));

        txtGoalContribution.setBorder(javax.swing.BorderFactory.createTitledBorder("G/A Contributions"));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblErrorPlayerId.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorPlayerId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorPlayerName.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorPlayerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorContractDuration.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorContractDuration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorPosition.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorPosition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorAge.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorAge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorMarketValue.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorMarketValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorNationality.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorNationality.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorGA.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorGA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlTransferListLayout = new javax.swing.GroupLayout(pnlTransferList);
        pnlTransferList.setLayout(pnlTransferListLayout);
        pnlTransferListLayout.setHorizontalGroup(
            pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransferListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTblTransferTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(39, 39, 39))
            .addGroup(pnlTransferListLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spTblTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 1062, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(77, 77, 77)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMarketValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorMarketValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(110, 110, 110)
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblErrorNationality, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboNationality, 0, 185, Short.MAX_VALUE)))
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblErrorPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(102, 102, 102)
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtContractDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                    .addComponent(lblErrorContractDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(8, 8, 8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblErrorGA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtGoalContribution, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                .addComponent(lblErrorPosition, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(comboPosition, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(pnlTransferListLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(171, 171, 171)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(203, 203, 203)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );
        pnlTransferListLayout.setVerticalGroup(
            pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransferListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTblTransferTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContractDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblErrorPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorContractDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addComponent(comboPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblErrorPosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10))
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addComponent(txtPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblErrorPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMarketValue, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGoalContribution, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblErrorMarketValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblErrorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrorGA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(129, Short.MAX_VALUE))
        );

        tabPaneMain.addTab("Transfer List", pnlTransferList);

        pnlAboutUs.setBackground(new java.awt.Color(255, 255, 255));
        pnlAboutUs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));
        pnlAboutUs.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlAboutUsLayout = new javax.swing.GroupLayout(pnlAboutUs);
        pnlAboutUs.setLayout(pnlAboutUsLayout);
        pnlAboutUsLayout.setHorizontalGroup(
            pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlAboutUsLayout.setVerticalGroup(
            pnlAboutUsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tabPaneMain.addTab("About Us", pnlAboutUs);

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabPaneMain, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlLoginScreen.setBackground(new java.awt.Color(20, 41, 94));
        pnlLoginScreen.setMaximumSize(new java.awt.Dimension(1100, 850));
        pnlLoginScreen.setMinimumSize(new java.awt.Dimension(1100, 850));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(1100, 850));
        pnlLoginScreen.setSize(new java.awt.Dimension(1100, 850));

        pnlLoginLeft.setBackground(new java.awt.Color(20, 41, 94));
        pnlLoginLeft.setPreferredSize(new java.awt.Dimension(570, 514));

        lblLoginLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/login.jpg"))); // NOI18N

        javax.swing.GroupLayout pnlLoginLeftLayout = new javax.swing.GroupLayout(pnlLoginLeft);
        pnlLoginLeft.setLayout(pnlLoginLeftLayout);
        pnlLoginLeftLayout.setHorizontalGroup(
            pnlLoginLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLeftLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblLoginLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        pnlLoginLeftLayout.setVerticalGroup(
            pnlLoginLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginLeftLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(lblLoginLogo)
                .addGap(26, 26, 26))
        );

        pnlLoginRight.setBackground(new java.awt.Color(163, 3, 59));

        txtFldLoginUsername.setBackground(new java.awt.Color(156, 3, 59));
        txtFldLoginUsername.setForeground(new java.awt.Color(255, 255, 255));
        txtFldLoginUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""))), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(218, 183, 87))); // NOI18N
        txtFldLoginUsername.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        pwdFldLogin.setBackground(new java.awt.Color(156, 3, 59));
        pwdFldLogin.setForeground(new java.awt.Color(255, 255, 255));
        pwdFldLogin.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("")), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 12), new java.awt.Color(218, 183, 87))); // NOI18N
        pwdFldLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdFldLoginActionPerformed(evt);
            }
        });

        btnLogin.setBackground(new java.awt.Color(95, 109, 136));
        btnLogin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblLoginTitle.setFont(new java.awt.Font("Gill Sans", 1, 28)); // NOI18N
        lblLoginTitle.setForeground(new java.awt.Color(238, 185, 89));
        lblLoginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginTitle.setText("Sign in to TransferMarket");

        lblLoginSubTitle.setBackground(new java.awt.Color(234, 192, 32));
        lblLoginSubTitle.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        lblLoginSubTitle.setForeground(new java.awt.Color(255, 204, 204));
        lblLoginSubTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginSubTitle.setText("Please enter your login details below using this app.");

        lblLoginForgotPwd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoginForgotPwd.setForeground(new java.awt.Color(255, 204, 204));
        lblLoginForgotPwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginForgotPwd.setText("Forgot your password?");

        lblLoginError.setForeground(new java.awt.Color(255, 0, 51));
        lblLoginError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlLoginRightLayout = new javax.swing.GroupLayout(pnlLoginRight);
        pnlLoginRight.setLayout(pnlLoginRightLayout);
        pnlLoginRightLayout.setHorizontalGroup(
            pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginRightLayout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addGroup(pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLoginForgotPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pwdFldLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addComponent(txtFldLoginUsername)))
                .addGap(105, 105, 105))
            .addGroup(pnlLoginRightLayout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlLoginRightLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoginSubTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoginError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlLoginRightLayout.setVerticalGroup(
            pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginRightLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblLoginSubTitle)
                .addGap(24, 24, 24)
                .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(pwdFldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblLoginForgotPwd)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlLoginScreenLayout = new javax.swing.GroupLayout(pnlLoginScreen);
        pnlLoginScreen.setLayout(pnlLoginScreenLayout);
        pnlLoginScreenLayout.setHorizontalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(pnlLoginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(pnlLoginRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        pnlLoginScreenLayout.setVerticalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(pnlLoginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(pnlLoginRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(150, 10, 1100, 890));
        setLocation(new java.awt.Point(150, 10));
        setMinimumSize(new java.awt.Dimension(1100, 850));
        setSize(new java.awt.Dimension(1100, 850));

        pnlLoadingScreen.setBackground(new java.awt.Color(0, 0, 0));
        pnlLoadingScreen.setSize(new java.awt.Dimension(1100, 900));

        lblLoadingLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoadingLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Loading.png"))); // NOI18N

        pgBarSplashScreen.setStringPainted(true);
        pgBarSplashScreen.setBackground(new java.awt.Color(255, 255, 255));
        pgBarSplashScreen.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        pgBarSplashScreen.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout pnlLoadingScreenLayout = new javax.swing.GroupLayout(pnlLoadingScreen);
        pnlLoadingScreen.setLayout(pnlLoadingScreenLayout);
        pnlLoadingScreenLayout.setHorizontalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoadingScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        pnlLoadingScreenLayout.setVerticalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializes the layout of the application by setting up the CardLayout
     * and adding panels for different screens. Each panel is uniquely
     * identified for easy navigation between screens.
     */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }
    
    
    /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgBarSplashScreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }
    
    

    
    /**
     * Initializes the application's data, including the Transfer list and table.
     * 
     */
    private void initializeData() {
        
            //Fetching input values from the Gui components
            String playerIdString=txtPlayerId.getText().trim();
            String playerName=txtPlayerName.getText().trim();
            String playerPosition=comboPosition.getSelectedItem().toString();
            String nationality=comboNationality.getSelectedItem().toString();
            String ageString=txtAge.getText().trim();
            String marketValueString=txtMarketValue.getText().trim();
            String contractDurationString=txtContractDuration.getText().trim();
            String goalContributionString=txtGoalContribution.getText().trim();
            
            //Initialize the validation. This variable indicates the complete validation 
            boolean isValid=true;
            
            //Validations for all the input fields are carried out respectively.
            
            if(!ValidationUtil.validatePlayerID(playerIdString, lblErrorPlayerId, txtPlayerId)){
                isValid=false;
                
            }
            if(!ValidationUtil.validatePlayerName(playerName, lblErrorPlayerName, txtPlayerName)){
                isValid=false;
            }
            if(!ValidationUtil.validateComboBox(nationality, lblErrorNationality, comboNationality,"Country","Nationality")){
                isValid=false;
            }
            if(!ValidationUtil.validateComboBox(playerPosition, lblErrorPosition, comboPosition, "Position","Position")){
                isValid=false;
            }
            if(!ValidationUtil.validateAge(ageString, lblErrorAge, txtAge)){
                isValid=false;
            }
            if(!ValidationUtil.validateMarketValue(marketValueString, lblErrorMarketValue, txtMarketValue)){
                isValid=false;
            }
            if(!ValidationUtil.validateContractDuration(contractDurationString, lblErrorContractDuration, txtContractDuration)){
                isValid=false;
            }
            if(!ValidationUtil.validateGoalContribution(goalContributionString, lblErrorGA, txtGoalContribution)){
                isValid=false;
            }
            
            if (isValid){
                int playerId=Integer.parseInt(playerIdString);
                int age=Integer.parseInt(ageString);
                double marketValue=Double.parseDouble(marketValueString);
                int contractDuration=Integer.parseInt(contractDurationString);
                int goalContribution=Integer.parseInt(goalContributionString);
                
                //Check for Duplicate playerId as playerId serves as the primary key for all the players.
                boolean isDuplicate=false;
                for(TransferModel player: transferList){
                    if(player.getPlayerId() == playerId){
                        isDuplicate=true;
                        break;
                    }
                }
                if(isDuplicate){
                    lblErrorPlayerId.setText("Player ID already exists.");
                    lblErrorPlayerId.setForeground(Color.RED);
                    return;
                }
                
                int response = JOptionPane.showConfirmDialog(this, 
                        "Do you really want to add this player?", 
                        "Confirm Add", 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.QUESTION_MESSAGE);

                
                //Know the user response
                if(response == JOptionPane.YES_OPTION){
                    // Create the player entity and add that entity to the list and table after user's confirmation.
                    TransferModel player = new TransferModel(playerId, playerName, playerPosition, nationality, age, marketValue, contractDuration, goalContribution);
                    transferList.add(player);
                    registerPlayer(player); 
                    JOptionPane.showMessageDialog(this, "Player added successfully!");
                    // Input fields are cleared and the individual error labels are reset after the player is added successfully.
                    clearAllFields(); 
                }
                else{
                    JOptionPane.showMessageDialog(this, "Player addition canceled.");
                }
                
            }
    }
    
    private void registerPlayer(TransferModel player){
         DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel(); model.addRow(new Object[]{
          player.getPlayerId(),
          player.getPlayerName(), 
          player.getPosition(),
          player.getNationality(),
          player.getAge(),
          player.getMarketValue(),
          player.getContractDuration(),
          player.getGoalContribution()
    });
        
    }
    private void clearAllFields() {
        // Reset all text fields
        txtPlayerId.setText("");
        txtPlayerName.setText("");
        txtAge.setText("");
        txtMarketValue.setText("");
        txtContractDuration.setText("");
        txtGoalContribution.setText("");

        // Reset combo boxes
        comboPosition.setSelectedIndex(0); 
        comboNationality.setSelectedIndex(0); 

        // Reset all error labels
        lblErrorPlayerId.setText("");
        lblErrorPlayerName.setText("");
        lblErrorPosition.setText("");
        lblErrorNationality.setText("");
        lblErrorAge.setText("");
        lblErrorMarketValue.setText("");
        lblErrorContractDuration.setText("");
        lblErrorGA.setText("");
        
        //Reset all textfields and comboBoxes
        ValidationUtil.resetTextFieldBorder(txtPlayerId);
        ValidationUtil.resetTextFieldBorder(txtPlayerName);
        ValidationUtil.resetTextFieldBorder(txtAge);
        ValidationUtil.resetTextFieldBorder(txtMarketValue);
        ValidationUtil.resetTextFieldBorder(txtContractDuration);
        ValidationUtil.resetTextFieldBorder(txtGoalContribution);
        ValidationUtil.resetComboBoxBorder(comboPosition);
        ValidationUtil.resetComboBoxBorder(comboNationality);
    }
   
    


    
   
    /**
     * Switches the application screen to the specified screen name.
     *
     * @param screenName The name of the screen to display.
     */
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * Handles the login button action. Validates the username and password
     * input and navigates to the main screen if credentials are correct.
     * Displays appropriate error messages otherwise.
     *
     * @param evt The action event triggered by the login button.
     */
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get the username and password input
        String username = txtFldLoginUsername.getText();
        String password = new String(pwdFldLogin.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            lblLoginError.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            lblLoginError.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            lblLoginError.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * Handles the logout button action. Clears the login fields and switches
     * back to the login screen.
     *
     * @param evt The action event triggered by the logout button.
     */
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
         // Show a confirmation dialog if the user reallys wants to logout or not? 
        int response = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to log out?", 
            "Confirm Logout", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
        
         // Check the answer from user\
         
        if (response == JOptionPane.YES_OPTION) {
            // User confirmed logout
            pwdFldLogin.setText(""); // Clear the password field
            txtFldLoginUsername.setText(""); // Clear the username field
            loadScreen("LoginScreen"); // Load the login screen
            JOptionPane.showMessageDialog(this, "You have been logged out successfully!", "Logout Successful", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            // User canceled the logout action
        JOptionPane.showMessageDialog(this, "Logout canceled.","Action Canceled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void pwdFldLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdFldLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdFldLoginActionPerformed

    private void txtMarketValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMarketValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMarketValueActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void txtPlayerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlayerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPlayerIdActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        int response = JOptionPane.showConfirmDialog(null,"Are you sure you want to clear all fields?","Confirm Clear",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE );
        if (response == JOptionPane.YES_OPTION)
        {
            clearAllFields();
            btnAdd.setEnabled(true);
        }
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //it takes the selected row from the user with their action
        int selectedRow=tblTransfer.getSelectedRow();
        //If the user doesn't select any row and  proceeds with delete button i.e(no row is selected)
        if(selectedRow==-1){
             JOptionPane.showMessageDialog(
                this,
                "Please select a row to delete.",
                "No Row Selected",
                JOptionPane.WARNING_MESSAGE);
                return;
        }
        //Check user's response
        int response = JOptionPane.showConfirmDialog(
            null,
            "Are you sure you want to delete the selected row?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE );
        //If user proceeds with the yes option
        if(response==JOptionPane.YES_OPTION){
             //Remove the row from the table 
              DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
              model.removeRow(selectedRow);
              // Remove the corresponding entity from the LinkedList
              transferList.remove(selectedRow);
              //Confirmation Message
              JOptionPane.showMessageDialog(
                this,
                "Row deleted successfully.",
                "Delete Successful",
                JOptionPane.INFORMATION_MESSAGE);    
        }
        btnAdd.setEnabled(true);
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here
        initializeData();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
         int selectedRow = tblTransfer.getSelectedRow();
         if (selectedRow == -1) {
            JOptionPane.showMessageDialog(
            this,
            "Please select a player to update.",
            "No Selection",
            JOptionPane.WARNING_MESSAGE);
            return;
         }
         // Get input values from the textfields
         String playerIdString = txtPlayerId.getText().trim();
         String playerName = txtPlayerName.getText().trim();
         String playerPosition = comboPosition.getSelectedItem().toString();
         String nationality = comboNationality.getSelectedItem().toString();
         String ageString = txtAge.getText().trim();
         String marketValueString = txtMarketValue.getText().trim();
         String contractDurationString = txtContractDuration.getText().trim();
         String goalContributionString = txtGoalContribution.getText().trim();
         
         //A boolean variable to keep the status of complete validation of all the attributes
         boolean isValid=true;
         // Perform the validations for all the attributes
        if (!ValidationUtil.validatePlayerID(playerIdString, lblErrorPlayerId, txtPlayerId)) {
            isValid = false;
        }
        if (!ValidationUtil.validatePlayerName(playerName, lblErrorPlayerName, txtPlayerName)) {
            isValid = false;
        }
        if (!ValidationUtil.validateComboBox(nationality, lblErrorNationality, comboNationality, "Country", "Nationality")) {
            isValid = false;
        }
        if (!ValidationUtil.validateComboBox(playerPosition, lblErrorPosition, comboPosition, "Position", "Position")) {
            isValid = false;
        }
        if (!ValidationUtil.validateAge(ageString, lblErrorAge, txtAge)) {
            isValid = false;
        }
        if (!ValidationUtil.validateMarketValue(marketValueString, lblErrorMarketValue, txtMarketValue)) {
            isValid = false;
        }
        if (!ValidationUtil.validateContractDuration(contractDurationString, lblErrorContractDuration, txtContractDuration)) {
            isValid = false;
        }
        if (!ValidationUtil.validateGoalContribution(goalContributionString, lblErrorGA, txtGoalContribution)) {
            isValid = false;
        }
        
        if(isValid){
            int playerId=Integer.parseInt(playerIdString);
            int age=Integer.parseInt(ageString);
            double marketValue=Double.parseDouble(marketValueString);
            int contractDuration=Integer.parseInt(contractDurationString);
            int goalContribution=Integer.parseInt(goalContributionString);
            // Check for duplicate PlayerID, excluding the current player
            boolean isDuplicate = false;
            for (int i = 0; i < transferList.size(); i++) {
                if (i != selectedRow && transferList.get(i).getPlayerId() == playerId) {
                    isDuplicate = true;
                    break;
                }
            }
            if (isDuplicate) {
                lblErrorPlayerId.setText("Player ID already exists.");
                lblErrorPlayerId.setForeground(Color.RED);
                return;
            }
            int response = JOptionPane.showConfirmDialog(this,
                    "Do you want to update this player's information?",
                    "Confirm Update",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION){
                // Create updated player object
                TransferModel updatedPlayer = new TransferModel(playerId, playerName, playerPosition, nationality, age, marketValue, contractDuration, goalContribution );
                // Update the list
                transferList.set(selectedRow, updatedPlayer);
                 // Update the table
                DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
                model.setValueAt(playerId, selectedRow, 0);
                model.setValueAt(playerName, selectedRow, 1);
                model.setValueAt(playerPosition, selectedRow, 2);
                model.setValueAt(nationality, selectedRow, 3);
                model.setValueAt(age, selectedRow, 4);
                model.setValueAt(marketValue, selectedRow, 5);
                model.setValueAt(contractDuration, selectedRow, 6);
                model.setValueAt(goalContribution, selectedRow, 7);
                
                JOptionPane.showMessageDialog(this, 
                    "Player updated successfully!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                    
                clearAllFields();
                btnAdd.setEnabled(true);
//                btnUpdate.setEnabled(false);
//                btnDelete.setEnabled(false);
            }
            else{
                JOptionPane.showMessageDialog(this,"Update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
            }
            
             
        }
    
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        TransferMarket app = new TransferMarket();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });

        app.startProgress();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboNationality;
    private javax.swing.JComboBox<String> comboPosition;
    private javax.swing.JLabel lblErrorAge;
    private javax.swing.JLabel lblErrorContractDuration;
    private javax.swing.JLabel lblErrorGA;
    private javax.swing.JLabel lblErrorMarketValue;
    private javax.swing.JLabel lblErrorNationality;
    private javax.swing.JLabel lblErrorPlayerId;
    private javax.swing.JLabel lblErrorPlayerName;
    private javax.swing.JLabel lblErrorPosition;
    private javax.swing.JLabel lblLoadingLogo;
    private javax.swing.JLabel lblLoginError;
    private javax.swing.JLabel lblLoginForgotPwd;
    private javax.swing.JLabel lblLoginLogo;
    private javax.swing.JLabel lblLoginSubTitle;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMainBarLogo;
    private javax.swing.JLabel lblMainBarSlogan;
    private javax.swing.JLabel lblPnlHome;
    private javax.swing.JLabel lblTblTransferTitle;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JPanel pnlAboutUs;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlLoadingScreen;
    private javax.swing.JPanel pnlLoginLeft;
    private javax.swing.JPanel pnlLoginRight;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JPanel pnlTransferList;
    private javax.swing.JPasswordField pwdFldLogin;
    private javax.swing.JScrollPane spTblTransfer;
    private javax.swing.JTabbedPane tabPaneMain;
    private javax.swing.JTable tblTransfer;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtContractDuration;
    private javax.swing.JTextField txtFldLoginUsername;
    private javax.swing.JTextField txtGoalContribution;
    private javax.swing.JTextField txtMarketValue;
    private javax.swing.JTextField txtPlayerId;
    private javax.swing.JTextField txtPlayerName;
    // End of variables declaration//GEN-END:variables
}

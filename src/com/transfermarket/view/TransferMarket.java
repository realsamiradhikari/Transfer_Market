package com.transfermarket.view;

import com.transfermarket.model.TransferModel;
import com.transfermarket.util.ValidationUtil;
import java.util.LinkedList;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import javax.swing.JOptionPane;
import com.transfermarket.controller.datastructure.Algorithms;
import javax.swing.JTable;
import java.awt.Rectangle;

/**
 * Main application window for the Transfer Market system. Manages player
 * transfers, displays player information, and handles user interactions.
 * Extends JFrame to provide the graphical user interface.
 *
 * @author Samir Adhikari
 */
public class TransferMarket extends javax.swing.JFrame {

    private LinkedList<TransferModel> transferList;
    private java.awt.CardLayout cardLayout;

    /**
     * Initializes the Transfer Market application window. Sets up the GUI
     * components, initializes the transfer list, and configures the table with
     * mouse listener for row selection events. Disables window resizing and
     * starts the progress indicator.
     */
    public TransferMarket() {
        setResizable(false);
        initComponents();
        transferList = new LinkedList<>();
        initializeLayout(); // Set up CardLayout and add screens
        startProgress();
        // Show loading screen and initiate progress
        initialTable();
        // Add table mouse listener
        tblTransfer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTransferMouseClicked(evt);
            }
        });
    }

    /**
     * Handles mouse click events on the transfer table. When a row is selected,
     * populates the input fields with the selected player's data and updates
     * button states appropriately: - Disables the Add button and Player ID
     * field - Enables Update and Delete buttons
     *
     * @param evt The mouse event triggered by clicking on the table
     */
    private void tblTransferMouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = tblTransfer.getSelectedRow();
        if (selectedRow != -1) {
            TransferModel player = transferList.get(selectedRow);

            txtPlayerId.setText(String.valueOf(player.getPlayerId()));
            txtPlayerName.setText(player.getPlayerName());
            comboPosition.setSelectedItem(player.getPosition());
            comboNationality.setSelectedItem(player.getNationality());
            txtAge.setText(String.valueOf(player.getAge()));
            txtMarketValue.setText(String.valueOf(player.getMarketValue()));
            txtContractDuration.setText(String.valueOf(player.getContractDuration()));
            txtGoalContribution.setText(String.valueOf(player.getGoalContribution()));
            txtPlayerId.setEnabled(false);
            btnAdd.setEnabled(false);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScreen = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblMainBarSlogan = new javax.swing.JLabel();
        lblMainBarLogo = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        lblSloganTwo = new javax.swing.JLabel();
        lblSloganThree = new javax.swing.JLabel();
        tabPaneMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        lblPnlHome = new javax.swing.JLabel();
        pnlTransferList = new javax.swing.JPanel();
        spTblTransfer = new javax.swing.JScrollPane();
        tblTransfer = new javax.swing.JTable();
        lblTblTransferTitle = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtPlayerId = new javax.swing.JTextField();
        txtPlayerName = new javax.swing.JTextField();
        comboPosition = new javax.swing.JComboBox<>();
        txtAge = new javax.swing.JTextField();
        comboNationality = new javax.swing.JComboBox<>();
        txtMarketValue = new javax.swing.JTextField();
        txtContractDuration = new javax.swing.JTextField();
        txtGoalContribution = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        lblErrorPlayerId = new javax.swing.JLabel();
        lblErrorPlayerName = new javax.swing.JLabel();
        lblErrorContractDuration = new javax.swing.JLabel();
        lblErrorAge = new javax.swing.JLabel();
        lblErrorMarketValue = new javax.swing.JLabel();
        lblErrorNationality = new javax.swing.JLabel();
        lblErrorGA = new javax.swing.JLabel();
        lblErrorPosition = new javax.swing.JLabel();
        comboSorting = new javax.swing.JComboBox<>();
        btnSort = new javax.swing.JButton();
        txtSearchValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        pnlAboutUs = new javax.swing.JPanel();
        lblHeadingFirst = new javax.swing.JLabel();
        lblHeadingSecond = new javax.swing.JLabel();
        lblHeadingThird = new javax.swing.JLabel();
        pnlVisions = new javax.swing.JPanel();
        lblVisionHeading = new javax.swing.JLabel();
        levelVisionB = new javax.swing.JLabel();
        lblVisionA = new javax.swing.JLabel();
        lblVisionC = new javax.swing.JLabel();
        lblVisionD = new javax.swing.JLabel();
        pnlMissions = new javax.swing.JPanel();
        lblMissionHeading = new javax.swing.JLabel();
        lblMissionA = new javax.swing.JLabel();
        lblMissionB = new javax.swing.JLabel();
        lblMissionC = new javax.swing.JLabel();
        lblMissionsD = new javax.swing.JLabel();
        lblMissionDb = new javax.swing.JLabel();
        lblAboutUsText = new javax.swing.JLabel();
        lblCompanyName = new javax.swing.JLabel();
        lblParagraph = new javax.swing.JLabel();
        lblBgAboutUs = new javax.swing.JLabel();
        pnlContactUs = new javax.swing.JPanel();
        lblCompanyNamee = new javax.swing.JLabel();
        lblHeadingContactUsB = new javax.swing.JLabel();
        lblHeadingContactUsA = new javax.swing.JLabel();
        lblContactB = new javax.swing.JLabel();
        lblContactA = new javax.swing.JLabel();
        lblContactC = new javax.swing.JLabel();
        lblContactEmail = new javax.swing.JLabel();
        lblContactAddress = new javax.swing.JLabel();
        lblContactNo = new javax.swing.JLabel();
        lblContactInsta = new javax.swing.JLabel();
        lblContactName = new javax.swing.JLabel();
        lblContactEmaill = new javax.swing.JLabel();
        lblContactPhoneNo = new javax.swing.JLabel();
        lblContactMessage = new javax.swing.JLabel();
        txtContactName = new javax.swing.JTextField();
        txtContactEmail = new javax.swing.JTextField();
        txtContactPhoneNo = new javax.swing.JTextField();
        txtContactMessage = new javax.swing.JTextField();
        btnContactSubmit = new javax.swing.JButton();
        lblContactUsBg = new javax.swing.JLabel();
        pnlLoginScreen = new javax.swing.JPanel();
        pnlLoginLeft = new javax.swing.JPanel();
        lblLoginLogo = new javax.swing.JLabel();
        pnlLoginRight = new javax.swing.JPanel();
        txtFldLoginUsername = new javax.swing.JTextField();
        pwdFldLogin = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        lblLoginTitle = new javax.swing.JLabel();
        lblLoginSubTitle = new javax.swing.JLabel();
        lblLoginForgotPwd = new javax.swing.JLabel();
        lblLoginError = new javax.swing.JLabel();
        pnlLoadingScreen = new javax.swing.JPanel();
        lblLoadingLogo = new javax.swing.JLabel();
        pgBarSplashScreen = new javax.swing.JProgressBar(0,100);

        pnlMainScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlMainScreen.setMaximumSize(new java.awt.Dimension(1100, 850));
        pnlMainScreen.setMinimumSize(new java.awt.Dimension(1100, 850));
        pnlMainScreen.setPreferredSize(new java.awt.Dimension(1100, 850));
        pnlMainScreen.setSize(new java.awt.Dimension(1100, 850));

        pnlMainBar.setBackground(new java.awt.Color(255, 255, 255));

        lblMainBarSlogan.setBackground(new java.awt.Color(255, 255, 255));
        lblMainBarSlogan.setFont(new java.awt.Font("Impact", 1, 44)); // NOI18N
        lblMainBarSlogan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMainBarSlogan.setText("Kickstart");

        lblMainBarLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Logo.png"))); // NOI18N

        btnLogout.setBackground(new java.awt.Color(204, 204, 204));
        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Logout.png"))); // NOI18N
        btnLogout.setBorder(null);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblSloganTwo.setFont(new java.awt.Font("Impact", 1, 44)); // NOI18N
        lblSloganTwo.setForeground(new java.awt.Color(0, 102, 204));
        lblSloganTwo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSloganTwo.setText("the Future of ");

        lblSloganThree.setFont(new java.awt.Font("Impact", 1, 44)); // NOI18N
        lblSloganThree.setForeground(new java.awt.Color(204, 0, 0));
        lblSloganThree.setText("Football Deals!");

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblMainBarLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(lblMainBarSlogan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSloganTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSloganThree, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblSloganThree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSloganTwo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMainBarSlogan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMainBarLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainBarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabPaneMain.setBackground(new java.awt.Color(255, 255, 255));
        tabPaneMain.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        pnlHome.setBackground(new java.awt.Color(255, 255, 255));
        pnlHome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        lblPnlHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Dashboard.png"))); // NOI18N

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addComponent(lblPnlHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(lblPnlHome, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 101, Short.MAX_VALUE))
        );

        tabPaneMain.addTab("Home", pnlHome);

        pnlTransferList.setBackground(new java.awt.Color(250, 250, 250));

        spTblTransfer.setBackground(new java.awt.Color(173, 216, 230));
        spTblTransfer.setForeground(new java.awt.Color(173, 216, 230));
        spTblTransfer.getViewport().setBackground(new java.awt.Color(173, 216, 230)); // Light Blue

        tblTransfer.setBackground(new java.awt.Color(173, 216, 230));
        tblTransfer.setFont(new java.awt.Font("Serif", 0, 13)); // NOI18N
        tblTransfer.setForeground(new java.awt.Color(64, 64, 64));
        tblTransfer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Player ID", " Player Name", " Position", " Nationality", " Age", " Market Value($)", " Contract Duration", " G/A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTransfer.setGridColor(new java.awt.Color(135, 206, 235));
        tblTransfer.setRowHeight(30);
        tblTransfer.setSelectionBackground(new java.awt.Color(163, 3, 59));
        tblTransfer.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tblTransfer.setShowGrid(true);
        tblTransfer.getTableHeader().setReorderingAllowed(false);
        spTblTransfer.setViewportView(tblTransfer);
        if (tblTransfer.getColumnModel().getColumnCount() > 0) {
            tblTransfer.getColumnModel().getColumn(0).setResizable(false);
            tblTransfer.getColumnModel().getColumn(1).setResizable(false);
            tblTransfer.getColumnModel().getColumn(2).setResizable(false);
            tblTransfer.getColumnModel().getColumn(3).setResizable(false);
            tblTransfer.getColumnModel().getColumn(4).setResizable(false);
            tblTransfer.getColumnModel().getColumn(4).setPreferredWidth(40);
            tblTransfer.getColumnModel().getColumn(5).setResizable(false);
            tblTransfer.getColumnModel().getColumn(7).setResizable(false);
        }

        lblTblTransferTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTblTransferTitle.setFont(new java.awt.Font("SansSerif", 0, 40)); // NOI18N
        lblTblTransferTitle.setForeground(new java.awt.Color(163, 3, 59));
        lblTblTransferTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTblTransferTitle.setText("Transfer ");
        lblTblTransferTitle.setMinimumSize(new java.awt.Dimension(244, 62));

        btnAdd.setBackground(new java.awt.Color(20, 41, 94));
        btnAdd.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(163, 3, 59));
        btnDelete.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(95, 109, 136));
        btnClear.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtPlayerId.setBackground(new java.awt.Color(250, 250, 250));
        txtPlayerId.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Player ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N
        txtPlayerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlayerIdActionPerformed(evt);
            }
        });

        txtPlayerName.setBackground(new java.awt.Color(250, 250, 250));
        txtPlayerName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Player Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N

        comboPosition.setBackground(new java.awt.Color(250, 250, 250));
        comboPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Position", "GK", "LB", "RB", "CB", "CDM", "CM", "AMF", "RWF", "LWF", "ST" }));
        comboPosition.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N

        txtAge.setBackground(new java.awt.Color(250, 250, 250));
        txtAge.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Age", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N
        txtAge.setMinimumSize(new java.awt.Dimension(62, 41));
        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        comboNationality.setBackground(new java.awt.Color(250, 250, 250));
        comboNationality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Country", "Argentina", "Brazil", "Spain", "England", "France", "Nepal", "Belgium", "Slovakia", "Hungary", "Portugal" }));
        comboNationality.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nationality", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N

        txtMarketValue.setBackground(new java.awt.Color(250, 250, 250));
        txtMarketValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Market Value", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N
        txtMarketValue.setMinimumSize(new java.awt.Dimension(62, 41));
        txtMarketValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMarketValueActionPerformed(evt);
            }
        });

        txtContractDuration.setBackground(new java.awt.Color(250, 250, 250));
        txtContractDuration.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contract Duration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N

        txtGoalContribution.setBackground(new java.awt.Color(250, 250, 250));
        txtGoalContribution.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "G/A Contributions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(20, 41, 89))); // NOI18N

        btnUpdate.setBackground(new java.awt.Color(238, 167, 66));
        btnUpdate.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblErrorPlayerId.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorPlayerId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorPlayerName.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorPlayerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorContractDuration.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorContractDuration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorAge.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorAge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorMarketValue.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorMarketValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorNationality.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorNationality.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorGA.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        lblErrorGA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorPosition.setFont(new java.awt.Font("Helvetica Neue", 0, 9)); // NOI18N
        lblErrorPosition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        comboSorting.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        comboSorting.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Options", "Age", "G/A", "Name" }));
        comboSorting.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sort By", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 10))); // NOI18N
        comboSorting.setPreferredSize(new java.awt.Dimension(75, 45));

        btnSort.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/sorting.png"))); // NOI18N
        btnSort.setBorder(null);
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        txtSearchValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchValueActionPerformed(evt);
            }
        });
        // Add the following to your JFrame or JPanel class

        // Setting placeholder for txtSearchValue
        txtSearchValue.setText("Player Name");  // Set the placeholder text
        txtSearchValue.setForeground(Color.GRAY);  // Set the placeholder text color

        // Add a FocusListener to manage placeholder behavior
        txtSearchValue.addFocusListener(new java.awt.event.FocusListener() {
            @Override
            public void focusGained(java.awt.event.FocusEvent e) {
                // Clear placeholder text when the field gains focus
                if (txtSearchValue.getText().equals("Player Name")) {
                    txtSearchValue.setText("");  // Clear the text
                    txtSearchValue.setForeground(Color.BLACK);  // Set the text color
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                // Restore placeholder text if the field is empty
                if (txtSearchValue.getText().isEmpty()) {
                    txtSearchValue.setText("Player Name");  // Restore the placeholder text
                    txtSearchValue.setForeground(Color.GRAY);  // Set the placeholder text color
                }
            }
        });

        btnSearch.setBackground(new java.awt.Color(230, 247, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/searching.png"))); // NOI18N
        btnSearch.setMinimumSize(new java.awt.Dimension(50, 50));
        btnSearch.setOpaque(true);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("SansSerif", 0, 40)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(20, 41, 94));
        lblTitle.setText("List");

        javax.swing.GroupLayout pnlTransferListLayout = new javax.swing.GroupLayout(pnlTransferList);
        pnlTransferList.setLayout(pnlTransferListLayout);
        pnlTransferListLayout.setHorizontalGroup(
            pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransferListLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addComponent(comboSorting, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(btnSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTblTransferTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(215, 215, 215)
                                .addComponent(txtSearchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlTransferListLayout.createSequentialGroup()
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(111, 111, 111)
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrorMarketValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPlayerName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMarketValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorPlayerName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comboNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContractDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorContractDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(108, 108, 108)
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblErrorGA, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(lblErrorPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(comboPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGoalContribution, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(spTblTransfer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1074, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(127, Short.MAX_VALUE))
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(223, 223, 223)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(182, 182, 182))))
        );
        pnlTransferListLayout.setVerticalGroup(
            pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransferListLayout.createSequentialGroup()
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                                .addComponent(btnSort)
                                .addGap(41, 41, 41))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTblTransferTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))))
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(txtSearchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(comboSorting, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)))
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                        .addComponent(spTblTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPlayerId, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblErrorPlayerName, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                                .addComponent(lblErrorPlayerId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblErrorPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                        .addComponent(txtContractDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorContractDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGoalContribution, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorGA, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransferListLayout.createSequentialGroup()
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addComponent(txtAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)
                                .addComponent(lblErrorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlTransferListLayout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(lblErrorNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlTransferListLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(txtMarketValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorMarketValue, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(178, 178, 178))
        );

        tabPaneMain.addTab("Transfer List", pnlTransferList);

        pnlAboutUs.setBackground(new java.awt.Color(0, 0, 0));
        pnlAboutUs.setForeground(new java.awt.Color(255, 255, 255));
        pnlAboutUs.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHeadingFirst.setFont(new java.awt.Font("SansSerif", 1, 32)); // NOI18N
        lblHeadingFirst.setForeground(new java.awt.Color(255, 255, 255));
        lblHeadingFirst.setText("The Story Of  ");
        pnlAboutUs.add(lblHeadingFirst, new org.netbeans.lib.awtextra.AbsoluteConstraints(532, 191, 380, 40));

        lblHeadingSecond.setFont(new java.awt.Font("SansSerif", 1, 42)); // NOI18N
        lblHeadingSecond.setForeground(new java.awt.Color(32, 201, 151));
        lblHeadingSecond.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblHeadingSecond.setText("Our Business ");
        pnlAboutUs.add(lblHeadingSecond, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 237, -1, -1));

        lblHeadingThird.setFont(new java.awt.Font("SansSerif", 1, 42)); // NOI18N
        lblHeadingThird.setForeground(new java.awt.Color(255, 255, 255));
        lblHeadingThird.setText("Journey");
        pnlAboutUs.add(lblHeadingThird, new org.netbeans.lib.awtextra.AbsoluteConstraints(844, 237, -1, -1));

        pnlVisions.setBackground(new java.awt.Color(255, 255, 255));

        lblVisionHeading.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lblVisionHeading.setText("Visions");

        levelVisionB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        levelVisionB.setText("◆ Empower clubs with digital solutions.");

        lblVisionA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblVisionA.setText("◆ Revolutionize player transfers.");

        lblVisionC.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblVisionC.setText("◆ Create a connected transfer  ecosystem.");

        lblVisionD.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblVisionD.setText("◆ Empower seamless connection in transfers.");

        javax.swing.GroupLayout pnlVisionsLayout = new javax.swing.GroupLayout(pnlVisions);
        pnlVisions.setLayout(pnlVisionsLayout);
        pnlVisionsLayout.setHorizontalGroup(
            pnlVisionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVisionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlVisionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVisionC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlVisionsLayout.createSequentialGroup()
                        .addGroup(pnlVisionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(levelVisionB, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(lblVisionA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlVisionsLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(lblVisionHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblVisionD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnlVisionsLayout.setVerticalGroup(
            pnlVisionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVisionsLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblVisionHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblVisionA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(levelVisionB)
                .addGap(7, 7, 7)
                .addComponent(lblVisionC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblVisionD)
                .addGap(0, 32, Short.MAX_VALUE))
        );

        pnlAboutUs.add(pnlVisions, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 470, 250, 150));

        pnlMissions.setBackground(new java.awt.Color(255, 255, 255));

        lblMissionHeading.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lblMissionHeading.setText("Missions");

        lblMissionA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMissionA.setText("◆ Simplify fotball transfer processes.");

        lblMissionB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMissionB.setText("◆ Deliver real time market insights.");

        lblMissionC.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMissionC.setText("◆ Build trust amongst  football stakeholders.");

        lblMissionsD.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMissionsD.setText("◆ Facilitate secure and transparent player");

        lblMissionDb.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMissionDb.setText("transactions.");

        javax.swing.GroupLayout pnlMissionsLayout = new javax.swing.GroupLayout(pnlMissions);
        pnlMissions.setLayout(pnlMissionsLayout);
        pnlMissionsLayout.setHorizontalGroup(
            pnlMissionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMissionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMissionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMissionA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMissionB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMissionsLayout.createSequentialGroup()
                        .addComponent(lblMissionC)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(pnlMissionsLayout.createSequentialGroup()
                .addGroup(pnlMissionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMissionsLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblMissionHeading))
                    .addGroup(pnlMissionsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMissionsD, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMissionsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblMissionDb, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlMissionsLayout.setVerticalGroup(
            pnlMissionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMissionsLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblMissionHeading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMissionA)
                .addGap(8, 8, 8)
                .addComponent(lblMissionB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMissionC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMissionsD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMissionDb)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pnlAboutUs.add(pnlMissions, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 470, 240, 150));

        lblAboutUsText.setFont(new java.awt.Font("Arial Black", 1, 16)); // NOI18N
        lblAboutUsText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAboutUsText.setText("About Us");
        pnlAboutUs.add(lblAboutUsText, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, 130, 30));

        lblCompanyName.setFont(new java.awt.Font("Arial Black", 1, 25)); // NOI18N
        lblCompanyName.setForeground(new java.awt.Color(255, 255, 255));
        lblCompanyName.setText("TransferMarket Inc");
        pnlAboutUs.add(lblCompanyName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 290, 29));

        lblParagraph.setText(
            "<html>"
            + "<div style='text-align: justify; max-width: 600px; margin: 0 auto; padding: 20px;'>"
            + "<p style='font-family: \"Open Sans\", sans-serif; font-size: 9px; color: white; line-height: 1.8; margin: 0; letter-spacing: 0.5px; font-weight: 300;'>"
            + "As the founder of TransferMarket, Samir Adhikari brings a unique vision to revolutionize "
            + "the football transfer ecosystem. With a passion for innovation and deep understanding of "
            + "football dynamics, he leads our mission to transform how transfers are conducted in the modern era. "
            + "Under his leadership, we strive to create seamless connections between clubs, agents, and players, "
            + "fostering a more efficient and transparent transfer environment."
            + "</p>"
            + "</div>"
            + "</html>"
        );
        lblParagraph.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        lblParagraph.setForeground(new java.awt.Color(255, 255, 255));
        pnlAboutUs.add(lblParagraph, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 300, 550, 130));

        lblBgAboutUs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/AboutUsBg.png"))); // NOI18N
        pnlAboutUs.add(lblBgAboutUs, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 0, 1220, 700));

        tabPaneMain.addTab("About Us", pnlAboutUs);

        pnlContactUs.setBackground(new java.awt.Color(0, 0, 0));
        pnlContactUs.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCompanyNamee.setFont(new java.awt.Font("Arial Black", 1, 25)); // NOI18N
        lblCompanyNamee.setForeground(new java.awt.Color(255, 255, 255));
        lblCompanyNamee.setText("TransferMarket Inc");
        pnlContactUs.add(lblCompanyNamee, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 290, 29));

        lblHeadingContactUsB.setFont(new java.awt.Font("SansSerif", 1, 42)); // NOI18N
        lblHeadingContactUsB.setForeground(new java.awt.Color(64, 224, 208));
        lblHeadingContactUsB.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblHeadingContactUsB.setText("Us");
        pnlContactUs.add(lblHeadingContactUsB, new org.netbeans.lib.awtextra.AbsoluteConstraints(854, 141, -1, -1));

        lblHeadingContactUsA.setFont(new java.awt.Font("SansSerif", 1, 42)); // NOI18N
        lblHeadingContactUsA.setForeground(new java.awt.Color(255, 255, 255));
        lblHeadingContactUsA.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblHeadingContactUsA.setText("Contact ");
        pnlContactUs.add(lblHeadingContactUsA, new org.netbeans.lib.awtextra.AbsoluteConstraints(668, 141, -1, -1));

        lblContactB.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactB.setForeground(new java.awt.Color(255, 255, 255));
        lblContactB.setText("or collaborations oportunities via the contact");
        pnlContactUs.add(lblContactB, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 300, 364, -1));

        lblContactA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactA.setForeground(new java.awt.Color(255, 255, 255));
        lblContactA.setText("For Questions, techinical assistance,");
        pnlContactUs.add(lblContactA, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 260, 356, -1));

        lblContactC.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactC.setForeground(new java.awt.Color(255, 255, 255));
        lblContactC.setText("infromation provided");
        pnlContactUs.add(lblContactC, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 340, 356, -1));

        lblContactEmail.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactEmail.setForeground(new java.awt.Color(255, 255, 255));
        lblContactEmail.setText("realsamiradhikari2061@gmail.com");
        pnlContactUs.add(lblContactEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 460, 356, 30));

        lblContactAddress.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactAddress.setForeground(new java.awt.Color(255, 255, 255));
        lblContactAddress.setText("Balkumari (ward-9), Lalitpur, Nepal");
        pnlContactUs.add(lblContactAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 520, 356, 30));

        lblContactNo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactNo.setForeground(new java.awt.Color(255, 255, 255));
        lblContactNo.setText("+977 9678448996");
        pnlContactUs.add(lblContactNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 410, 356, 30));

        lblContactInsta.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactInsta.setForeground(new java.awt.Color(255, 255, 255));
        lblContactInsta.setText("ruralvoyager_2061");
        pnlContactUs.add(lblContactInsta, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 580, 356, 30));

        lblContactName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactName.setForeground(new java.awt.Color(255, 255, 255));
        lblContactName.setText("Name");
        pnlContactUs.add(lblContactName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 59, -1));

        lblContactEmaill.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactEmaill.setForeground(new java.awt.Color(255, 255, 255));
        lblContactEmaill.setText("Email");
        pnlContactUs.add(lblContactEmaill, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 59, -1));

        lblContactPhoneNo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactPhoneNo.setForeground(new java.awt.Color(255, 255, 255));
        lblContactPhoneNo.setText("Phone Number");
        pnlContactUs.add(lblContactPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, -1, -1));

        lblContactMessage.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactMessage.setForeground(new java.awt.Color(255, 255, 255));
        lblContactMessage.setText("Message");
        pnlContactUs.add(lblContactMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, -1, -1));

        txtContactName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtContactName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactNameActionPerformed(evt);
            }
        });
        pnlContactUs.add(txtContactName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 480, 40));

        txtContactEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        pnlContactUs.add(txtContactEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 220, 40));

        txtContactPhoneNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        pnlContactUs.add(txtContactPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 320, 220, 40));

        txtContactMessage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtContactMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactMessageActionPerformed(evt);
            }
        });
        pnlContactUs.add(txtContactMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 480, 130));

        btnContactSubmit.setBackground(new java.awt.Color(110, 42, 245));
        btnContactSubmit.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        btnContactSubmit.setText("Submit");
        btnContactSubmit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(110, 42, 245)));
        btnContactSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContactSubmitActionPerformed(evt);
            }
        });
        btnContactSubmit.setBorderPainted(false);
        btnContactSubmit.setFocusPainted(false);
        btnContactSubmit.setContentAreaFilled(false);
        pnlContactUs.add(btnContactSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 600, 150, 40));

        lblContactUsBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Final About us.png"))); // NOI18N
        pnlContactUs.add(lblContactUsBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, -3, 1220, 710));

        tabPaneMain.addTab("Contact Us ", pnlContactUs);

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabPaneMain, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlLoginScreen.setBackground(new java.awt.Color(20, 41, 94));
        pnlLoginScreen.setMaximumSize(new java.awt.Dimension(1100, 850));
        pnlLoginScreen.setMinimumSize(new java.awt.Dimension(1100, 850));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(1100, 850));
        pnlLoginScreen.setSize(new java.awt.Dimension(1100, 850));

        pnlLoginLeft.setBackground(new java.awt.Color(20, 41, 94));
        pnlLoginLeft.setPreferredSize(new java.awt.Dimension(570, 514));

        lblLoginLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/login.jpg"))); // NOI18N

        javax.swing.GroupLayout pnlLoginLeftLayout = new javax.swing.GroupLayout(pnlLoginLeft);
        pnlLoginLeft.setLayout(pnlLoginLeftLayout);
        pnlLoginLeftLayout.setHorizontalGroup(
            pnlLoginLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLeftLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblLoginLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        pnlLoginLeftLayout.setVerticalGroup(
            pnlLoginLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginLeftLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLoginLogo)
                .addGap(26, 26, 26))
        );

        pnlLoginRight.setBackground(new java.awt.Color(163, 3, 59));

        txtFldLoginUsername.setBackground(new java.awt.Color(156, 3, 59));
        txtFldLoginUsername.setForeground(new java.awt.Color(255, 255, 255));
        txtFldLoginUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""))), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13), new java.awt.Color(218, 183, 87))); // NOI18N
        txtFldLoginUsername.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtFldLoginUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLoginUsernameActionPerformed(evt);
            }
        });

        pwdFldLogin.setBackground(new java.awt.Color(156, 3, 59));
        pwdFldLogin.setForeground(new java.awt.Color(255, 255, 255));
        pwdFldLogin.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("")), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 12), new java.awt.Color(218, 183, 87))); // NOI18N
        pwdFldLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdFldLoginActionPerformed(evt);
            }
        });

        btnLogin.setBackground(new java.awt.Color(95, 109, 136));
        btnLogin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblLoginTitle.setFont(new java.awt.Font("Gill Sans", 1, 28)); // NOI18N
        lblLoginTitle.setForeground(new java.awt.Color(238, 185, 89));
        lblLoginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginTitle.setText("Sign in to TransferMarket");

        lblLoginSubTitle.setBackground(new java.awt.Color(234, 192, 32));
        lblLoginSubTitle.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        lblLoginSubTitle.setForeground(new java.awt.Color(255, 204, 204));
        lblLoginSubTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginSubTitle.setText("Please enter your login details below using this app.");

        lblLoginForgotPwd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoginForgotPwd.setForeground(new java.awt.Color(255, 204, 204));
        lblLoginForgotPwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginForgotPwd.setText("Forgot your password?");

        lblLoginError.setForeground(new java.awt.Color(255, 0, 51));
        lblLoginError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlLoginRightLayout = new javax.swing.GroupLayout(pnlLoginRight);
        pnlLoginRight.setLayout(pnlLoginRightLayout);
        pnlLoginRightLayout.setHorizontalGroup(
            pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginRightLayout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addGroup(pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLoginForgotPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pwdFldLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                        .addComponent(txtFldLoginUsername)))
                .addGap(105, 105, 105))
            .addGroup(pnlLoginRightLayout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlLoginRightLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoginSubTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoginError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlLoginRightLayout.setVerticalGroup(
            pnlLoginRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginRightLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblLoginSubTitle)
                .addGap(24, 24, 24)
                .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(pwdFldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblLoginForgotPwd)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlLoginScreenLayout = new javax.swing.GroupLayout(pnlLoginScreen);
        pnlLoginScreen.setLayout(pnlLoginScreenLayout);
        pnlLoginScreenLayout.setHorizontalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(pnlLoginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(pnlLoginRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        pnlLoginScreenLayout.setVerticalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(pnlLoginLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(pnlLoginRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TransferMarket");
        setBounds(new java.awt.Rectangle(190, 10, 1100, 890));
        setLocation(new java.awt.Point(170, 10));
        setMinimumSize(new java.awt.Dimension(1100, 850));
        setSize(new java.awt.Dimension(1100, 850));

        pnlLoadingScreen.setBackground(new java.awt.Color(0, 0, 0));
        pnlLoadingScreen.setSize(new java.awt.Dimension(1100, 900));

        lblLoadingLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoadingLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/transfermarket/resources/Loading.png"))); // NOI18N

        pgBarSplashScreen.setStringPainted(true);
        pgBarSplashScreen.setBackground(new java.awt.Color(255, 255, 255));
        pgBarSplashScreen.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        pgBarSplashScreen.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout pnlLoadingScreenLayout = new javax.swing.GroupLayout(pnlLoadingScreen);
        pnlLoadingScreen.setLayout(pnlLoadingScreenLayout);
        pnlLoadingScreenLayout.setHorizontalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoadingScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        pnlLoadingScreenLayout.setVerticalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializes the layout of the application by setting up the CardLayout
     * and adding panels for different screens.
     *
     * This method: - Creates a new CardLayout for managing multiple screens -
     * Adds panels for Loading, Login, and Main screens - Sets each panel with a
     * unique identifier for navigation - Initially displays the Loading screen
     * Screen identifiers: - "LoadingScreen": Initial loading panel
     * -"LoginScreen": User authentication panel - "MainScreen": Primary
     * application panel
     */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }

    /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgBarSplashScreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }

    /**
     * Initializes the table with default player entries. Adds predefined player
     * records to both the transfer list and table display.
     *
     * Creates initial player entries with the following data: - Player ID -
     * Player Name - Position - Nationality - Age - Market Value - Contract
     * Duration - Goal Contribution
     *
     * Each player entry is added to the transfer list and registered in the
     * table.
     */
    private void initialTable() {
        TransferModel transfer = new TransferModel(1, "Lionel Messi", "AMF", "Argentina",
                34, 300000, 48, 112);
        transferList.add(transfer);
        registerPlayer(transfer);
        TransferModel transfer1 = new TransferModel(2, "Samir Adhikari", "CB", "Nepal",
                20, 1000, 12, 10);
        transferList.add(transfer1);
        registerPlayer(transfer1);
        TransferModel transfer2 = new TransferModel(3, "Cristiano Ronaldo", "ST", "Portugal",
                39, 100000, 36, 70);
        transferList.add(transfer2);
        registerPlayer(transfer2);
        TransferModel transfer3 = new TransferModel(4, "Lamine Yamal", "RWF", "Spain",
                17, 50000, 40, 60);
        transferList.add(transfer3);
        registerPlayer(transfer3);

    }

    /**
     * Initializes the application's data by collecting and validating user
     * input from GUI components.
     *
     * This method performs the following operations: - Retrieves values entered
     * in text fields and selected in combo boxes from the GUI. - Validates
     * input fields for Player ID, Name, Position, Nationality, Age, Market
     * Value, Contract Duration, and Goal Contribution using
     * {@link ValidationUtil}. - Checks for duplicate Player IDs in the existing
     * transfer list. - If all validations pass, creates a new
     * {@link TransferModel} object and adds it to the {@code transferList} and
     * the table after user confirmation. - Displays appropriate error messages
     * for invalid inputs. - Clears all input fields and resets error labels if
     * a player is successfully added. - Cancels the addition if the user
     * chooses "No" in the confirmation dialog.
     *
     * @throws NumberFormatException If numeric fields (Player ID, Age, Market
     * Value, Contract Duration, Goal Contribution) contain non-numeric values
     * during parsing.
     */
    private void initializeData() {

        //Fetching input values from the Gui components
        String playerIdString = txtPlayerId.getText().trim();
        String playerName = txtPlayerName.getText().trim();
        String playerPosition = comboPosition.getSelectedItem().toString();
        String nationality = comboNationality.getSelectedItem().toString();
        String ageString = txtAge.getText().trim();
        String marketValueString = txtMarketValue.getText().trim();
        String contractDurationString = txtContractDuration.getText().trim();
        String goalContributionString = txtGoalContribution.getText().trim();

        //Initialize the validation. This variable indicates the complete validation 
        boolean isValid = true;

        //Validations for all the input fields are carried out respectively.
        if (!ValidationUtil.validatePlayerID(playerIdString, lblErrorPlayerId, txtPlayerId)) {
            isValid = false;

        }
        if (!ValidationUtil.validatePlayerName(playerName, lblErrorPlayerName, txtPlayerName)) {
            isValid = false;
        }
        if (!ValidationUtil.validateComboBox(nationality, lblErrorNationality, comboNationality, "Country", "Nationality")) {
            isValid = false;
        }
        if (!ValidationUtil.validateComboBox(playerPosition, lblErrorPosition, comboPosition, "Position", "Position")) {
            isValid = false;
        }
        if (!ValidationUtil.validateAge(ageString, lblErrorAge, txtAge)) {
            isValid = false;
        }
        if (!ValidationUtil.validateMarketValue(marketValueString, lblErrorMarketValue, txtMarketValue)) {
            isValid = false;
        }
        if (!ValidationUtil.validateContractDuration(contractDurationString, lblErrorContractDuration, txtContractDuration)) {
            isValid = false;
        }
        if (!ValidationUtil.validateGoalContribution(goalContributionString, lblErrorGA, txtGoalContribution)) {
            isValid = false;
        }

        if (isValid) {
            int playerId = Integer.parseInt(playerIdString);
            int age = Integer.parseInt(ageString);
            double marketValue = Double.parseDouble(marketValueString);
            int contractDuration = Integer.parseInt(contractDurationString);
            int goalContribution = Integer.parseInt(goalContributionString);

            //Check for Duplicate playerId as playerId serves as the primary key for all the players.
            boolean isDuplicate = false;
            for (TransferModel player : transferList) {
                if (player.getPlayerId() == playerId) {
                    isDuplicate = true;
                    break;
                }
            }
            if (isDuplicate) {
                lblErrorPlayerId.setText("Player ID already exists.");
                lblErrorPlayerId.setForeground(Color.RED);
                return;
            }

            int response = JOptionPane.showConfirmDialog(this,
                    "Do you really want to add this player?",
                    "Confirm Add",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            //Know the user response
            if (response == JOptionPane.YES_OPTION) {
                // Create the player entity and add that entity to the list and table after user's confirmation.
                TransferModel player = new TransferModel(playerId, playerName, playerPosition, nationality, age, marketValue, contractDuration, goalContribution);
                transferList.add(player);
                registerPlayer(player);
                JOptionPane.showMessageDialog(this, "Player added successfully!");
                // Input fields are cleared and the individual error labels are reset after the player is added successfully.
                clearAllFields();
            } else {
                JOptionPane.showMessageDialog(this, "Player addition canceled.");
            }

        }
    }

    /**
     * Registers a player to the transfer list table.
     *
     * This method takes a {@link TransferModel} object representing a player's
     * information and adds its details to the transfer list table. It populates
     * the table with relevant attributes like Player ID, Name, Position,
     * Nationality, Age, Market Value, Contract Duration, and Goal Contribution.
     *
     * @param player the {@link TransferModel} object containing the details of
     * the player to register
     */
    private void registerPlayer(TransferModel player) {
        DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
        model.addRow(new Object[]{
            player.getPlayerId(),
            player.getPlayerName(),
            player.getPosition(),
            player.getNationality(),
            player.getAge(),
            player.getMarketValue(),
            player.getContractDuration(),
            player.getGoalContribution()
        });

    }

    /**
     * Clears all input fields, resets combo boxes, and error labels in the
     * form.
     *
     * This method resets all text fields to empty, resets all combo boxes to
     * their default selection, and clears all error labels by setting them to
     * empty strings. Additionally, it resets the borders of all text fields and
     * combo boxes using
     * {@link ValidationUtil#resetTextFieldBorder(javax.swing.JTextField)} and
     * {@link ValidationUtil#resetComboBoxBorder(javax.swing.JComboBox)}.
     * Finally, it clears any row selection in the table.
     */
    private void clearAllFields() {
        // Reset all text fields
        txtPlayerId.setText("");
        txtPlayerName.setText("");
        txtAge.setText("");
        txtMarketValue.setText("");
        txtContractDuration.setText("");
        txtGoalContribution.setText("");
        txtSearchValue.setText("");

        // Reset combo boxes
        comboPosition.setSelectedIndex(0);
        comboNationality.setSelectedIndex(0);

        // Reset all error labels
        lblErrorPlayerId.setText("");
        lblErrorPlayerName.setText("");
        lblErrorPosition.setText("");
        lblErrorNationality.setText("");
        lblErrorAge.setText("");
        lblErrorMarketValue.setText("");
        lblErrorContractDuration.setText("");
        lblErrorGA.setText("");

        //Reset all textfields and comboBoxes
        ValidationUtil.resetTextFieldBorder(txtPlayerId);
        ValidationUtil.resetTextFieldBorder(txtPlayerName);
        ValidationUtil.resetTextFieldBorder(txtAge);
        ValidationUtil.resetTextFieldBorder(txtMarketValue);
        ValidationUtil.resetTextFieldBorder(txtContractDuration);
        ValidationUtil.resetTextFieldBorder(txtGoalContribution);
        ValidationUtil.resetComboBoxBorder(comboPosition);
        ValidationUtil.resetComboBoxBorder(comboNationality);

        // Clear any row selection in the table
        tblTransfer.clearSelection();
    }

    /**
     * Switches the application screen to the specified screen name.
     *
     * @param screenName The name of the screen to display.
     */
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * Handles the login button action. Validates the username and password
     * input and navigates to the main screen if credentials are correct.
     * Displays appropriate error messages otherwise.
     *
     * @param evt The action event triggered by the login button.
     */
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get the username and password input
        String username = txtFldLoginUsername.getText();
        String password = new String(pwdFldLogin.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            lblLoginError.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            lblLoginError.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            lblLoginError.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * Handles the logout button action. Clears the login fields and switches
     * back to the login screen.
     *
     * @param evt The action event triggered by the logout button.
     */
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // Show a confirmation dialog if the user reallys wants to logout or not? 
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to log out?",
                "Confirm Logout",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // Check the answer from user\
        if (response == JOptionPane.YES_OPTION) {
            // User confirmed logout
            pwdFldLogin.setText(""); // Clear the password field
            txtFldLoginUsername.setText(""); // Clear the username field
            loadScreen("LoginScreen"); // Load the login screen
            JOptionPane.showMessageDialog(this, "You have been logged out successfully!", "Logout Successful", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // User canceled the logout action
            JOptionPane.showMessageDialog(this, "Logout canceled.", "Action Canceled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void pwdFldLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdFldLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdFldLoginActionPerformed

    private void txtMarketValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMarketValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMarketValueActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void txtPlayerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlayerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPlayerIdActionPerformed

    /**
     * Handles the clear action when the clear button is clicked. Displays a
     * confirmation dialog before clearing all input fields. Resets all field
     * values and placeholder text, and enables the Add button and Player ID
     * field.
     *
     * @param evt The action event triggered by the clear button click
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear all fields?", "Confirm Clear",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            clearAllFields();
            btnAdd.setEnabled(true);
            txtPlayerId.setEnabled(true);
            txtSearchValue.setText("Player Name");// Restore the placeholder text
            txtSearchValue.setForeground(Color.GRAY);  // Set the placeholder text color
        }

    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * Handles the delete action when the delete button is clicked. Removes the
     * selected player from both the table and the transfer list after
     * confirmation. Shows warning message if no row is selected and
     * confirmation dialog before deletion.
     *
     * @param evt The action event triggered by the delete button click
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //it takes the selected row from the user with their action
        int selectedRow = tblTransfer.getSelectedRow();
        //If the user doesn't select any row and  proceeds with delete button i.e(no row is selected)
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(
                    this,
                    "Please select a row to delete.",
                    "No Row Selected",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Check user's response
        int response = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete the selected row?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        //If user proceeds with the yes option
        if (response == JOptionPane.YES_OPTION) {
            //Remove the row from the table 
            DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
            model.removeRow(selectedRow);
            // Remove the corresponding entity from the LinkedList
            transferList.remove(selectedRow);
            //Confirmation Message
            JOptionPane.showMessageDialog(
                    this,
                    "Row deleted successfully.",
                    "Delete Successful",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        btnAdd.setEnabled(true);
        txtPlayerId.setEnabled(true);

    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Handles the add action when the add button is clicked. Initiates the data
     * collection and validation process for adding a new player.
     *
     * @param evt The action event triggered by the add button click
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here
        initializeData();
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * Handles the update action when the update button is clicked. Updates the
     * selected player's information in the transfer list and table after
     * validation and confirmation. Displays a warning message if no row is
     * selected and validates all input fields before updating.
     *
     * @param evt The action event triggered by the update button click
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = tblTransfer.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(
                    this,
                    "Please select a player to update.",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Get input values from the textfields
        String playerIdString = txtPlayerId.getText().trim();
        String playerName = txtPlayerName.getText().trim();
        String playerPosition = comboPosition.getSelectedItem().toString();
        String nationality = comboNationality.getSelectedItem().toString();
        String ageString = txtAge.getText().trim();
        String marketValueString = txtMarketValue.getText().trim();
        String contractDurationString = txtContractDuration.getText().trim();
        String goalContributionString = txtGoalContribution.getText().trim();

        //A boolean variable to keep the status of complete validation of all the attributes
        boolean isValid = true;
        // Perform the validations for all the attributes
        if (!ValidationUtil.validatePlayerID(playerIdString, lblErrorPlayerId, txtPlayerId)) {
            isValid = false;
        }
        if (!ValidationUtil.validatePlayerName(playerName, lblErrorPlayerName, txtPlayerName)) {
            isValid = false;
        }
        if (!ValidationUtil.validateComboBox(nationality, lblErrorNationality, comboNationality, "Country", "Nationality")) {
            isValid = false;
        }
        if (!ValidationUtil.validateComboBox(playerPosition, lblErrorPosition, comboPosition, "Position", "Position")) {
            isValid = false;
        }
        if (!ValidationUtil.validateAge(ageString, lblErrorAge, txtAge)) {
            isValid = false;
        }
        if (!ValidationUtil.validateMarketValue(marketValueString, lblErrorMarketValue, txtMarketValue)) {
            isValid = false;
        }
        if (!ValidationUtil.validateContractDuration(contractDurationString, lblErrorContractDuration, txtContractDuration)) {
            isValid = false;
        }
        if (!ValidationUtil.validateGoalContribution(goalContributionString, lblErrorGA, txtGoalContribution)) {
            isValid = false;
        }

        if (isValid) {
            int playerId = Integer.parseInt(playerIdString);
            int age = Integer.parseInt(ageString);
            double marketValue = Double.parseDouble(marketValueString);
            int contractDuration = Integer.parseInt(contractDurationString);
            int goalContribution = Integer.parseInt(goalContributionString);
            // Check for duplicate PlayerID, excluding the current player
            boolean isDuplicate = false;
            if (isDuplicate) {
                lblErrorPlayerId.setText("Player ID already exists.");
                lblErrorPlayerId.setForeground(Color.RED);
                return;
            }
            int response = JOptionPane.showConfirmDialog(this,
                    "Do you want to update this player's information?",
                    "Confirm Update",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                // Create updated player object
                TransferModel updatedPlayer = new TransferModel(playerId, playerName, playerPosition, nationality, age, marketValue, contractDuration, goalContribution);
                // Update the list
                transferList.set(selectedRow, updatedPlayer);
                // Update the table
                DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
                model.setValueAt(playerId, selectedRow, 0);
                model.setValueAt(playerName, selectedRow, 1);
                model.setValueAt(playerPosition, selectedRow, 2);
                model.setValueAt(nationality, selectedRow, 3);
                model.setValueAt(age, selectedRow, 4);
                model.setValueAt(marketValue, selectedRow, 5);
                model.setValueAt(contractDuration, selectedRow, 6);
                model.setValueAt(goalContribution, selectedRow, 7);

                JOptionPane.showMessageDialog(this,
                        "Player updated successfully!",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);

                clearAllFields();
                btnAdd.setEnabled(true);
                txtPlayerId.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
            }

        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * Handles the sort action when the sort button is clicked. Initiates the
     * sorting process based on the selected criteria in the combo box.
     *
     * @param evt The action event triggered by the sort button click
     */
    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // This button helps us to sort the Linked list and the table on the basis of the option selected in the combobox:
        String selectedOption = comboSorting.getSelectedItem().toString();
        sortPlayers(selectedOption);
    }//GEN-LAST:event_btnSortActionPerformed

    /**
     * Sorts the players list based on the specified criteria and updates the
     * table display. Implements different sorting algorithms based on the
     * criteria: - Age: Merge Sort - Name: Selection Sort - G/A: Insertion Sort
     *
     * @param criteria The sorting criteria selected by the user ("Age", "Name",
     * or "G/A")
     */
    private void sortPlayers(String criteria) {
        switch (criteria) {
            case "Age":
                transferList = Algorithms.mergeSortByAge(transferList); // Merge Sort
                break;
            case "Name":
                transferList = Algorithms.selectionSortByName(transferList); // Selection Sort by Name
                break;
            case "G/A":
                transferList = Algorithms.insertionSortByGoalContribution(transferList); // Insertion Sort
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select a valid sorting option.");
                return;
        }

        // Update the table with the sorted list
        updateTable();
    }

    /**
     * Updates the table display with the current data from the transfer list.
     * Clears the existing table content and repopulates it with all player
     * information.
     */
    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) tblTransfer.getModel();
        model.setRowCount(0);

        for (TransferModel player : transferList) {
            model.addRow(new Object[]{
                player.getPlayerId(),
                player.getPlayerName(),
                player.getPosition(),
                player.getNationality(),
                player.getAge(),
                player.getMarketValue(),
                player.getContractDuration(),
                player.getGoalContribution()
            });
        }
    }


    private void txtSearchValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchValueActionPerformed

    /**
     * Highlights and scrolls to the specified row in the table. If the row
     * exists, selects and scrolls to make it visible. Shows a message dialog if
     * the row is not found.
     *
     * @param tblTransfer The JTable component containing the data
     * @param rowIndex The index of the row to highlight
     */
    public void highlightRow(JTable tblTransfer, int rowIndex) {
        if (rowIndex >= 0) {
            // Select and scroll to the row
            tblTransfer.setRowSelectionInterval(rowIndex, rowIndex);
            tblTransfer.scrollRectToVisible(new Rectangle(tblTransfer.getCellRect(rowIndex, 0, true)));
        } else {
            JOptionPane.showMessageDialog(null, "Name not found not found!", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Handles the search button action event. Performs binary search on the
     * name-sorted transfer list and highlights matching results. Shows
     * appropriate messages for empty search or no results found.
     *
     * @param evt The action event triggered by the search button
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchName = txtSearchValue.getText().trim();

        if (!searchName.isEmpty()) {
            // Sort the list by name before performing binary search
            transferList = Algorithms.selectionSortByName(transferList);
            updateTable();
            // Use the binarySearchByName method from Algorithms class
            int rowIndex = Algorithms.binarySearchByName(transferList, searchName);

            if (rowIndex != -1) {
                // Highlight the row in the table
                highlightRow(tblTransfer, rowIndex);
            } else {
                JOptionPane.showMessageDialog(null, "Player not found.", "Info", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a player name to search.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtContactNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactNameActionPerformed

    private void txtContactMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactMessageActionPerformed

    private void txtFldLoginUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLoginUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldLoginUsernameActionPerformed

    /**
     * Handles the contact submit button action event. Displays a confirmation
     * message when the contact form is submitted.
     *
     * @param evt The action event triggered by the contact submit button
     */
    private void btnContactSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContactSubmitActionPerformed
        // Display a confirmation message
        javax.swing.JOptionPane.showMessageDialog(this,
                "Your message has been successfully submitted!",
                "Confirmation",
                javax.swing.JOptionPane.INFORMATION_MESSAGE);// TODO add your handling code here:
    }//GEN-LAST:event_btnContactSubmitActionPerformed

    /**
     * The main entry point for the application. Sets up the Nimbus look and
     * feel, creates and displays the main window, and starts the progress
     * indicator.
     *
     * @param args Command line arguments (not used)
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransferMarket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        TransferMarket app = new TransferMarket();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });

        app.startProgress();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnContactSubmit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboNationality;
    private javax.swing.JComboBox<String> comboPosition;
    private javax.swing.JComboBox<String> comboSorting;
    private javax.swing.JLabel lblAboutUsText;
    private javax.swing.JLabel lblBgAboutUs;
    private javax.swing.JLabel lblCompanyName;
    private javax.swing.JLabel lblCompanyNamee;
    private javax.swing.JLabel lblContactA;
    private javax.swing.JLabel lblContactAddress;
    private javax.swing.JLabel lblContactB;
    private javax.swing.JLabel lblContactC;
    private javax.swing.JLabel lblContactEmail;
    private javax.swing.JLabel lblContactEmaill;
    private javax.swing.JLabel lblContactInsta;
    private javax.swing.JLabel lblContactMessage;
    private javax.swing.JLabel lblContactName;
    private javax.swing.JLabel lblContactNo;
    private javax.swing.JLabel lblContactPhoneNo;
    private javax.swing.JLabel lblContactUsBg;
    private javax.swing.JLabel lblErrorAge;
    private javax.swing.JLabel lblErrorContractDuration;
    private javax.swing.JLabel lblErrorGA;
    private javax.swing.JLabel lblErrorMarketValue;
    private javax.swing.JLabel lblErrorNationality;
    private javax.swing.JLabel lblErrorPlayerId;
    private javax.swing.JLabel lblErrorPlayerName;
    private javax.swing.JLabel lblErrorPosition;
    private javax.swing.JLabel lblHeadingContactUsA;
    private javax.swing.JLabel lblHeadingContactUsB;
    private javax.swing.JLabel lblHeadingFirst;
    private javax.swing.JLabel lblHeadingSecond;
    private javax.swing.JLabel lblHeadingThird;
    private javax.swing.JLabel lblLoadingLogo;
    private javax.swing.JLabel lblLoginError;
    private javax.swing.JLabel lblLoginForgotPwd;
    private javax.swing.JLabel lblLoginLogo;
    private javax.swing.JLabel lblLoginSubTitle;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMainBarLogo;
    private javax.swing.JLabel lblMainBarSlogan;
    private javax.swing.JLabel lblMissionA;
    private javax.swing.JLabel lblMissionB;
    private javax.swing.JLabel lblMissionC;
    private javax.swing.JLabel lblMissionDb;
    private javax.swing.JLabel lblMissionHeading;
    private javax.swing.JLabel lblMissionsD;
    private javax.swing.JLabel lblParagraph;
    private javax.swing.JLabel lblPnlHome;
    private javax.swing.JLabel lblSloganThree;
    private javax.swing.JLabel lblSloganTwo;
    private javax.swing.JLabel lblTblTransferTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVisionA;
    private javax.swing.JLabel lblVisionC;
    private javax.swing.JLabel lblVisionD;
    private javax.swing.JLabel lblVisionHeading;
    private javax.swing.JLabel levelVisionB;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JPanel pnlAboutUs;
    private javax.swing.JPanel pnlContactUs;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlLoadingScreen;
    private javax.swing.JPanel pnlLoginLeft;
    private javax.swing.JPanel pnlLoginRight;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JPanel pnlMissions;
    private javax.swing.JPanel pnlTransferList;
    private javax.swing.JPanel pnlVisions;
    private javax.swing.JPasswordField pwdFldLogin;
    private javax.swing.JScrollPane spTblTransfer;
    private javax.swing.JTabbedPane tabPaneMain;
    private javax.swing.JTable tblTransfer;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtContactEmail;
    private javax.swing.JTextField txtContactMessage;
    private javax.swing.JTextField txtContactName;
    private javax.swing.JTextField txtContactPhoneNo;
    private javax.swing.JTextField txtContractDuration;
    private javax.swing.JTextField txtFldLoginUsername;
    private javax.swing.JTextField txtGoalContribution;
    private javax.swing.JTextField txtMarketValue;
    private javax.swing.JTextField txtPlayerId;
    private javax.swing.JTextField txtPlayerName;
    private javax.swing.JTextField txtSearchValue;
    // End of variables declaration//GEN-END:variables
}
